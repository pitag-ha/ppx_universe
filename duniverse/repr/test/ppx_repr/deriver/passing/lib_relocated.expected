module Elsewhere :
  sig
    module Foo : module type of Repr
    type t[@@deriving repr { lib = (Some "Foo") }]
    include sig val t : t Foo.t end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end =
  struct
    module Foo = Repr
    module Irmin = struct  end
    type t = (unit * unit)[@@deriving repr { lib = (Some "Foo") }]
    include struct let t = Foo.pair Foo.unit Foo.unit end[@@ocaml.doc
                                                           "@inline"]
    [@@merlin.hide ]
  end 
module Locally_avaliable :
  sig
    type 'a ty
    type t[@@deriving repr { lib = None }]
    include sig val t : t ty end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end =
  struct
    let (pair, unit) = let open Repr in (pair, unit)
    type 'a ty = 'a Repr.ty
    module Irmin = struct  end
    type t = (unit * unit)[@@deriving repr { lib = None }]
    include struct let t = pair unit unit end[@@ocaml.doc "@inline"][@@merlin.hide
                                                                    ]
  end 
