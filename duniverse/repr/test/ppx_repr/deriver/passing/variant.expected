type test_variant1 =
  | A [@@deriving repr]
include
  struct
    let test_variant1_t =
      Repr.sealv
        (Repr.(|~)
           (Repr.variant "test_variant1" (fun a -> function | A -> a))
           (Repr.case0 "A" A))
  end[@@ocaml.doc "@inline"][@@merlin.hide ]
type test_variant2 =
  | A2 of int64 [@@deriving repr]
include
  struct
    let test_variant2_t =
      Repr.sealv
        (Repr.(|~)
           (Repr.variant "test_variant2"
              (fun a2 -> function | A2 x1 -> a2 x1))
           (Repr.case1 "A2" Repr.int64 (fun x1 -> A2 x1)))
  end[@@ocaml.doc "@inline"][@@merlin.hide ]
type test_variant3 =
  | A3 of string * test_variant2 [@@deriving repr]
include
  struct
    let test_variant3_t =
      Repr.sealv
        (Repr.(|~)
           (Repr.variant "test_variant3"
              (fun a3 -> function | A3 (x1, x2) -> a3 (x1, x2)))
           (Repr.case1 "A3" (Repr.pair Repr.string test_variant2_t)
              (fun (x1, x2) -> A3 (x1, x2))))
  end[@@ocaml.doc "@inline"][@@merlin.hide ]
type test_variant4 =
  | A4 
  | B4 
  | C4 [@@deriving repr]
include
  struct
    let test_variant4_t =
      Repr.sealv
        (Repr.(|~)
           (Repr.(|~)
              (Repr.(|~)
                 (Repr.variant "test_variant4"
                    (fun a4 ->
                       fun b4 ->
                         fun c4 -> function | A4 -> a4 | B4 -> b4 | C4 -> c4))
                 (Repr.case0 "A4" A4)) (Repr.case0 "B4" B4))
           (Repr.case0 "C4" C4))
  end[@@ocaml.doc "@inline"][@@merlin.hide ]
type test_variant5 =
  | A5 
  | B5 of string * test_variant4 
  | C5 of int32 * string * unit [@@deriving repr]
include
  struct
    let test_variant5_t =
      Repr.sealv
        (Repr.(|~)
           (Repr.(|~)
              (Repr.(|~)
                 (Repr.variant "test_variant5"
                    (fun a5 ->
                       fun b5 ->
                         fun c5 ->
                           function
                           | A5 -> a5
                           | B5 (x1, x2) -> b5 (x1, x2)
                           | C5 (x1, x2, x3) -> c5 (x1, x2, x3)))
                 (Repr.case0 "A5" A5))
              (Repr.case1 "B5" (Repr.pair Repr.string test_variant4_t)
                 (fun (x1, x2) -> B5 (x1, x2))))
           (Repr.case1 "C5" (Repr.triple Repr.int32 Repr.string Repr.unit)
              (fun (x1, x2, x3) -> C5 (x1, x2, x3))))
  end[@@ocaml.doc "@inline"][@@merlin.hide ]
type test_variant6 =
  | Nil 
  | Cons of string * test_variant6 [@@deriving repr]
include
  struct
    let test_variant6_t =
      Repr.mu
        (fun test_variant6_t ->
           Repr.sealv
             (Repr.(|~)
                (Repr.(|~)
                   (Repr.variant "test_variant6"
                      (fun nil ->
                         fun cons ->
                           function
                           | Nil -> nil
                           | Cons (x1, x2) -> cons (x1, x2)))
                   (Repr.case0 "Nil" Nil))
                (Repr.case1 "Cons" (Repr.pair Repr.string test_variant6_t)
                   (fun (x1, x2) -> Cons (x1, x2)))))
  end[@@ocaml.doc "@inline"][@@merlin.hide ]
